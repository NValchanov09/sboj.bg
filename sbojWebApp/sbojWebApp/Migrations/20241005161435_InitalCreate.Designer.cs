// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sbojWebApp.Data;

#nullable disable

namespace sbojWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241005161435_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sbojWebApp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("sbojWebApp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("sbojWebApp.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("sbojWebApp.Models.CoverLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobApplicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobApplicationId")
                        .IsUnique()
                        .HasFilter("[JobApplicationId] IS NOT NULL");

                    b.ToTable("CoverLetters");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceHigh")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceLow")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryHigh")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryLow")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VacationDaysHigh")
                        .HasColumnType("int");

                    b.Property<int?>("VacationDaysLow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("sbojWebApp.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("sbojWebApp.Models.AppUser", b =>
                {
                    b.HasOne("sbojWebApp.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("sbojWebApp.Models.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId");

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("sbojWebApp.Models.CoverLetter", b =>
                {
                    b.HasOne("sbojWebApp.Models.JobApplication", "JobApplication")
                        .WithOne("CoverLetter")
                        .HasForeignKey("sbojWebApp.Models.CoverLetter", "JobApplicationId");

                    b.Navigation("JobApplication");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobApplication", b =>
                {
                    b.HasOne("sbojWebApp.Models.AppUser", "AppUser")
                        .WithMany("Applications")
                        .HasForeignKey("AppUserId");

                    b.HasOne("sbojWebApp.Models.JobPosition", "JobPosition")
                        .WithMany("Applications")
                        .HasForeignKey("JobPositionId");

                    b.Navigation("AppUser");

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobPosition", b =>
                {
                    b.HasOne("sbojWebApp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("sbojWebApp.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("sbojWebApp.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("AppUser");

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("sbojWebApp.Models.Language", b =>
                {
                    b.HasOne("sbojWebApp.Models.JobPosition", null)
                        .WithMany("RequiredLanguages")
                        .HasForeignKey("JobPositionId");
                });

            modelBuilder.Entity("sbojWebApp.Models.AppUser", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("sbojWebApp.Models.Company", b =>
                {
                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobApplication", b =>
                {
                    b.Navigation("CoverLetter");
                });

            modelBuilder.Entity("sbojWebApp.Models.JobPosition", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("RequiredLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
